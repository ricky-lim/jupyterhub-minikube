proxy:
  # Generated by `openssl rand -hex 32`
  secretToken: 1ee5f8bc93144a6ab027e62ab5437b902aa11e21a5bb9ebe09afc07d03cb6365

hub:
  image:
    name: hub
    tag: fastapi
    # Ensure to use use local docker image
    pullPolicy: "IfNotPresent"
  allowNamedServers: true
  db:
    pvc:
      accessModes:
        - ReadWriteMany
      storage: 1Gi
  extraConfig:
    00-auth: |
      # To set the spawner.environment
      from tornado import gen
      from jupyterhub.auth import DummyAuthenticator


      class DummyMiniAuthenticator(DummyAuthenticator):
          def normalize_username(self, username):
              return username.lower().replace(" ", "_")

          @gen.coroutine
          def pre_spawn_start(self, user, spawner):
              spawner.environment['NB_USER'] = user.name
              spawner.environment['HOME'] = f'/home/{user.name}'


          async def authenticate(self, handler, data=None):
              if self.password:
                  if data['password'] == self.password:
                      return {'name': data['username']}
                  return None
              return {'name': data['username']}


      c.Application.log_level = 'DEBUG'
      c.JupyterHub.authenticator_class = DummyMiniAuthenticator
    01-spawners: |
      c.Spawner.cmd = ['start.sh', 'jupyterhub-singleuser', '--allow-root']
      c.KubeSpawner.http_timeout = 600
      c.KubeSpawner.start_timeout = 600
    02-cds-handlers: |
      from cdsdashboards.hubextension import cds_extra_handlers


      c.JupyterHub.extra_handlers = cds_extra_handlers
      c.VariableMixin.proxy_force_alive = True
      c.VariableMixin.proxy_last_activity_interval = 600
      c.VariableMixin.proxy_request_timeout = 600
    03-cds-templates: |
      from cdsdashboards.app import CDS_TEMPLATE_PATHS


      c.JupyterHub.template_paths = CDS_TEMPLATE_PATHS
      c.VariableMixin.extra_presentation_launchers = {
          'voila-rz': {
                      'args': ['--destport=0', 'python3', '{-}m','voila',
                          '{presentation_path}',
                          '{--}port={port}',
                          '{--}no-browser',
                          '{--}Voila.base_url={base_url}/',
                          '{--}Voila.server_url=/',
                          '{--}template=vuetify-rz',
                          f"{{--}}VoilaConfiguration.file_whitelist=['.*']"
                      ],
          },
          'main': {
              'cmd': ['start.sh', 'python3', '-m', 'jhsingle_native_proxy.main',
                      '--logs', '--debug'],
              'args': ['--destport=0', 'python3',
                       '{presentation_path}',
                       '{--}root-path={base_url}',
                       '{--}port={port}', 
                       '--forward-user-info',
              ],
          },
      }
      c.VariableMixin.default_presentation_cmd = ['start.sh', 'python3', '-m',
          'jhsingle_native_proxy.main']
      c.CDSDashboardsConfig.presentation_types = ['voila', 'main']
      c.CDSDashboardsConfig.allow_custom_conda_env = True
      c.JupyterHub.template_vars = {
          'cds_hide_user_named_servers': True,
          'cds_hide_user_dashboard_servers': True,
      }
    04-cds-kube: |
      c.JupyterHub.spawner_class = 'cdsdashboards.hubextension.spawners.variablekube.VariableKubeSpawner'
      c.CDSDashboardsConfig.builder_class = 'cdsdashboards.builder.kubebuilder.KubeBuilder'
      c.JupyterHub.redirect_to_server = False
      c.JupyterHub.default_url = '/hub/dashboards'
      c.Spawner.default_url = '/lab'
      # c.Spawner.debug = True


singleuser:
  uid: 0
  image:
    name: singleuser
    tag: fastapi
    pullPolicy: "IfNotPresent"
  storage:
    type: dynamic
    capacity: 10Gi
    dynamic:
      pvcNameTemplate: claim-{username}
      volumeNameTemplate: volume-{username}
      storageAccessModes: [ ReadWriteMany ]
    homeMountPath: /home/{username}
  extraEnv:
    CHOWN_HOME: 'yes'
    NB_USER: {username}

securityContext:
  enabled: false

scheduling:
  userScheduler:
    enabled: false


cull:
  timeout: 86400 # 1 day idle
  every: 172800 # 2 day

auth:
  type: custom
  custom:
    className: 'DummyMiniAuthenticator'
  dummy:
    password: 'password'
  admin:
    access: true
    users:
      - ril
  whitelist:
    users:
      - ril
